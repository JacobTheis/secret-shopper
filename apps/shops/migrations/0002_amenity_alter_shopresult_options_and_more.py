# Generated by Django 5.1.7 on 2025-04-09 18:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("shops", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Amenity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The unique name of the amenity (e.g., 'Swimming Pool', 'In-unit Washer/Dryer').",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of the amenity."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Amenity",
                "verbose_name_plural": "Amenities",
                "ordering": ["name"],
            },
        ),
        migrations.AlterModelOptions(
            name="shopresult",
            options={
                "ordering": ["-created_at"],
                "verbose_name": "Shop Result Link",
                "verbose_name_plural": "Shop Result Links",
            },
        ),
        migrations.RemoveField(
            model_name="shopresult",
            name="extracted_data",
        ),
        migrations.RemoveField(
            model_name="shopresult",
            name="summary",
        ),
        migrations.CreateModel(
            name="CommunityInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The name of the community.",
                        max_length=255,
                    ),
                ),
                (
                    "overview",
                    models.TextField(
                        blank=True,
                        help_text="A brief summary or description of the community.",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="The link to the community's homepage or relevant page.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "application_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The fee charged for applying.",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "application_fee_source",
                    models.URLField(
                        blank=True,
                        help_text="The source URL for the application fee.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "administration_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The one-time administrative fee.",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "administration_fee_source",
                    models.URLField(
                        blank=True,
                        help_text="The source URL for the administration fee.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "membership_fee",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Recurring membership or resident benefit package fee.",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "membership_fee_source",
                    models.URLField(
                        blank=True,
                        help_text="The source URL for the membership fee.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "pet_policy",
                    models.TextField(
                        blank=True, help_text="The community's policy and fees on pets."
                    ),
                ),
                (
                    "pet_policy_source",
                    models.URLField(
                        blank=True,
                        help_text="The source URL for the pet policy.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "self_showings",
                    models.BooleanField(
                        blank=True,
                        help_text="Whether the community offers self-showings.",
                        null=True,
                    ),
                ),
                (
                    "self_showings_source",
                    models.URLField(
                        blank=True,
                        help_text="The source URL for self-showing information.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "office_hours",
                    models.CharField(
                        blank=True,
                        help_text="The office hours of the community.",
                        max_length=255,
                    ),
                ),
                (
                    "resident_portal_provider",
                    models.CharField(
                        blank=True,
                        help_text="The software provider for the resident portal.",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community_amenities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Amenities available in the community.",
                        related_name="communities",
                        to="shops.amenity",
                    ),
                ),
                (
                    "shop_result",
                    models.OneToOneField(
                        help_text="The shop result this community information belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_info",
                        to="shops.shopresult",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Information",
                "verbose_name_plural": "Community Information",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CommunityPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name or title of the page.", max_length=255
                    ),
                ),
                (
                    "overview",
                    models.TextField(
                        blank=True,
                        help_text="A brief overview or description of the page.",
                    ),
                ),
                (
                    "url",
                    models.URLField(help_text="The URL for the page.", max_length=500),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community_info",
                    models.ForeignKey(
                        help_text="The community this page belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="shops.communityinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Page",
                "verbose_name_plural": "Community Pages",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="FloorPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the floor plan.", max_length=255
                    ),
                ),
                (
                    "beds",
                    models.PositiveSmallIntegerField(
                        blank=True, help_text="Number of bedrooms.", null=True
                    ),
                ),
                (
                    "baths",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Number of bathrooms (e.g., 1.0, 1.5, 2.0).",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="The URL for the floor plan.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "sqft",
                    models.PositiveIntegerField(
                        blank=True, help_text="Square footage.", null=True
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="Type of unit (e.g., Apartment, Townhome, Studio).",
                        max_length=100,
                    ),
                ),
                (
                    "min_rental_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum rental price.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "max_rental_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum rental price.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "security_deposit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Security deposit amount.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "amenities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Amenities specific to this floor plan.",
                        related_name="floor_plans",
                        to="shops.amenity",
                    ),
                ),
                (
                    "community_info",
                    models.ForeignKey(
                        help_text="The community this floor plan belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="floor_plans",
                        to="shops.communityinfo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Floor Plan",
                "verbose_name_plural": "Floor Plans",
                "ordering": ["name"],
            },
        ),
    ]
